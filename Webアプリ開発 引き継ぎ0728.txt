Webアプリケーション開発 引き継ぎ指令書 (2025/07/28 v10)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認


ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発すること。 


最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 


指令書の完全読込: この指令書を一字一句、意味を理解しながら最後まで読了する。 


ワークフロー実行宣言: 最初のタスク指示に対し、まず「承知いたしました。指令書に基づき、以下の【作業前確認】を行います。」と応答せよ。 


ユーザー承認の取得: 以下のテンプレートを提示し、ユーザーからの明確な承認（「OK」「はい」等）を得るまで、絶対に次のステップに進むな。 

【作業前確認】
・今回のタスク: 「〇〇画面の作成」
・影響ファイル: △△.html, □□.py, 〇〇.css
上記の認識で相違ないでしょうか？
【指令2】プロジェクト憲法（不変の原則）


原則1: "Appleならどう作るか？" を自問せよ。 

データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIを基準とせよ。 


原則2: base.html は全ての法の頂点である。 


{% extends "base.html" %} と {% block content %} を持たないHTMLファイルを新規作成してはならない。 


原則3: CSSは汚染から守れ。 


style.cssはグローバル専用の聖域である。画面固有のスタイルは、必ず個別のCSSファイルを作成し、必要なHTMLからのみ読み込め。 


原則4: 事実を歪曲するな。 

たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。自己判断でリファクタリング等を提案してはならない。（補足: ユーザーからの明確な指示があった場合に限り、リファクタリング作業は許可される。） 

【開発サマリー・ログ】

【v9セッション 開発サマリー】


達成タスク: リファクタリング後のアプリケーション安定化（デバッグ作業）。 


概要: v8のリファクタリング後に発生した一連の起動時・描画時エラーを完全に修正。アプリケーションは再び安定稼働状態に復帰し、新規機能開発の準備が整った。 

【v10セッション 開発サマリー】 (今回作業分)

達成タスク: 勘定科目内訳書フォームのUIリファクタリング、及び開発基盤の強化。

概要: 指令書の提案に基づき、Jinja2マクロを導入して4つのフォームHTMLの重複コードを排除。UIの統一性と保守性を飛躍的に向上させた。また、将来の認証機能・テスト導入・UI改善を見据え、関連ライブラリを先行して導入した。

実装詳細:

app/templates/company/_form_helpers.html にて再利用可能な render_field マクロを定義。

app/static/css/form_helpers.css を作成し、統一感のあるフォームスタイルを適用。

deposit_form.htmlなど4つのテンプレートをマクロ呼び出し形式にリファクタリング。

base.html を更新し、htmx と alpine.js を導入。

Flask-Login, pytest, pytest-flask をインストールし、requirements.txt を更新。

学習と教訓: UIコンポーネントの抽象化（マクロ化）は、"Appleならどう作るか？" の原則を体現する上で極めて有効な戦術である。早期の開発基盤強化は、将来の開発速度と品質を担保する。

【指令3】技術仕様とファイル構成 (2025/07/28 v10 現在)


Backend: Python, Flask 
Database: SQLite (instance/database.db) 
Libraries: Flask-SQLAlchemy, Flask-WTF, pandas, Flask-Login, pytest, pytest-flask 
Frontend: HTML, CSS, Jinja2, HTMX, Alpine.js 
ファイル構成 (v10セッションでの更新後):

app/
├── __init__.py
├── __pycache__/
│   ├── __init__.cpython-313.pyc
│   └── extensions.cpython-313.pyc
├── company/
│   ├── __init__.py
│   ├── __pycache__/
│   ├── core.py
│   ├── employees.py
│   ├── forms.py
│   ├── import_data.py
│   ├── models.py
│   ├── offices.py
│   └── statement_of_accounts.py
├── static/
│   ├── css/
│   │   ├── data_mapping.css
│   │   ├── declaration_form.css
│   │   ├── form_helpers.css
│   │   ├── form_view.css
│   │   ├── select_accounting.css
│   │   ├── statement_of_accounts.css
│   │   ├── style.css
│   │   └── table_view.css
│   └── js/
│       └── address_autofill.js
├── templates/
│   ├── base.html
│   └── company/
│       ├── _form_helpers.html
│       ├── accounts_receivable_form.html
│       ├── data_mapping.html
│       ├── declaration_form.html
│       ├── deposit_form.html
│       ├── edit_employee.html
│       ├── employee_list.html
│       ├── import_accounts.html
│       ├── import_chart_of_accounts.html
│       ├── import_fixed_assets.html
│       ├── import_journals.html
│       ├── notes_receivable_form.html
│       ├── office_form.html
│       ├── office_list.html
│       ├── register_employee.html
│       ├── statement_of_accounts.html
│       └── temporary_payment_form.html
│   ├── index.html
│   ├── register.html
│   └── result.html
instance/
migrations/
requirements.txt
run.py
template_beppyo1.pdf
venv/
...

【次期タスク提案】

タスク1: 既存主要フォームのUIリファクタリング

目的:
現在、主要な情報入力フォームである「基本情報」「社員名簿」「申告情報」「事業所一覧」は、_form_helpers.htmlのマクロを使用せずに実装されている。これによりUIの微細な不統一やコードの重複が発生しており、保守性を低下させる要因となっている。
この問題を解決するため、v10セッションで確立したJinja2マクロによるUI構築パターンをこれらの既存フォームにも適用し、アプリケーション全体の品質とメンテナンス性を向上させる。
指示:
影響ファイルの特定: 以下の4つの機能に対応するフォームテンプレートと、それらを呼び出すPythonのルート関数を特定する。
基本情報 (declaration_form.html / core.py 内の show 関数)
社員名簿 (register_employee.html, edit_employee.html / employees.py 内の register_employee, edit_employee 関数)
申告情報 (declaration_form.html / core.py 内の show 関数)
事業所一覧 (office_form.html / offices.py 内の add_office, edit_office 関数)
フォームテンプレートの置換:
特定した各HTMLファイルの内容を、v10で導入した render_field マクロを呼び出す形式に全面的に書き換える。
各テンプレートの先頭で {% from 'company/_form_helpers.html' import render_field %} を記述する。
フォームの各項目を {{ render_field(form.field_name, placeholder="適切な例") }} の形式で呼び出すように修正する。
既存の form_view.css へのリンクは不要になるため、各HTMLファイルの <head> ブロックから削除する。
動作確認:
リファクタリング後、各フォームの新規登録画面と編集画面が正しく表示され、データの保存が問題なく行えることを確認する。

タスク2: ユーザー認証機能の実装
目的:
v10で導入した Flask-Login を活用し、アプリケーションのセキュリティを確保するための基本的な認証基盤（ログイン・ログアウト機能）を構築する。これは、複数ユーザーによる利用やデータの保護に不可欠なステップである。
指示:
Userモデルの追加: app/company/models.pyに、UserMixinを継承したUserモデルを追加する。最低限、id (主キー), username (ユニーク), password_hash のフィールドを定義する。パスワードはハッシュ化して保存すること。
認証フォームの作成: app/company/forms.pyに、StringFieldとPasswordField、BooleanField(remember_me)を持つLoginFormを追加する。
認証ルートの作成: 認証ロジック（ログイン、ログアウト処理）を記述するため、app/company/auth.pyを新規作成し、/login, /logout のルートを定義する。このファイルは新しいブループリントとしてapp/company/__init__.pyで登録する。
LoginManagerの初期化: app/__init__.pyでFlask-LoginのLoginManagerをインスタンス化し、login_view（例: 'company_auth.login'）を設定する。また、user_loaderコールバック関数を定義する。
ログイン画面の作成: app/templates/company/内に、作成したLoginFormを描画するためのlogin.htmlを作成する。base.htmlを継承すること。
アクセス制御: 既存の各ルート（例: company.showなど）に@login_requiredデコレータを追加し、未認証ユーザーをログインページにリダイレクトさせる。

【留意事項】
削除機能は現在、ブラウザ標準のconfirm()ダイアログに依存している。UI/UXをさらに向上させる場合、将来的により洗練されたカスタムモーダルへの置換が考えられるが、現時点では指令書原則4に基づき、既存のパターンを変更しないこと。 