Webアプリケーション開発 引き継ぎ指令書 (2025/07/28 v10)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認


ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発すること。 


最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 


指令書の完全読込: この指令書を一字一句、意味を理解しながら最後まで読了する。 


ワークフロー実行宣言: 最初のタスク指示に対し、まず「承知いたしました。指令書に基づき、以下の【作業前確認】を行います。」と応答せよ。 


ユーザー承認の取得: 以下のテンプレートを提示し、ユーザーからの明確な承認（「OK」「はい」等）を得るまで、絶対に次のステップに進むな。 

【作業前確認】
・今回のタスク: 「〇〇画面の作成」
・影響ファイル: △△.html, □□.py, 〇〇.css
上記の認識で相違ないでしょうか？
【指令2】プロジェクト憲法（不変の原則）


原則1: "Appleならどう作るか？" を自問せよ。 

データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIを基準とせよ。 


原則2: base.html は全ての法の頂点である。 


{% extends "base.html" %} と {% block content %} を持たないHTMLファイルを新規作成してはならない。 


原則3: CSSは汚染から守れ。 


style.cssはグローバル専用の聖域である。画面固有のスタイルは、必ず個別のCSSファイルを作成し、必要なHTMLからのみ読み込め。 


原則4: 事実を歪曲するな。 

たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。自己判断でリファクタリング等を提案してはならない。（補足: ユーザーからの明確な指示があった場合に限り、リファクタリング作業は許可される。） 

【開発サマリー・ログ】

【v9セッション 開発サマリー】


達成タスク: リファクタリング後のアプリケーション安定化（デバッグ作業）。 


概要: v8のリファクタリング後に発生した一連の起動時・描画時エラーを完全に修正。アプリケーションは再び安定稼働状態に復帰し、新規機能開発の準備が整った。 

【v10セッション 開発サマリー】 (今回作業分)

達成タスク: 勘定科目内訳書フォームのUIリファクタリング、及び開発基盤の強化。

概要: 指令書の提案に基づき、Jinja2マクロを導入して4つのフォームHTMLの重複コードを排除。UIの統一性と保守性を飛躍的に向上させた。また、将来の認証機能・テスト導入・UI改善を見据え、関連ライブラリを先行して導入した。

実装詳細:

app/templates/company/_form_helpers.html にて再利用可能な render_field マクロを定義。

app/static/css/form_helpers.css を作成し、統一感のあるフォームスタイルを適用。

deposit_form.htmlなど4つのテンプレートをマクロ呼び出し形式にリファクタリング。

base.html を更新し、htmx と alpine.js を導入。

Flask-Login, pytest, pytest-flask をインストールし、requirements.txt を更新。

学習と教訓: UIコンポーネントの抽象化（マクロ化）は、"Appleならどう作るか？" の原則を体現する上で極めて有効な戦術である。早期の開発基盤強化は、将来の開発速度と品質を担保する。

【指令3】技術仕様とファイル構成 (2025/07/28 v10 現在)


Backend: Python, Flask 
Database: SQLite (instance/database.db) 
Libraries: Flask-SQLAlchemy, Flask-WTF, pandas, Flask-Login, pytest, pytest-flask 
Frontend: HTML, CSS, Jinja2, HTMX, Alpine.js 
ファイル構成 (v10セッションでの更新後):

app/
├── __init__.py
├── __pycache__/
│   ├── __init__.cpython-313.pyc
│   └── extensions.cpython-313.pyc
├── company/
│   ├── __init__.py
│   ├── __pycache__/
│   ├── auth.py
│   ├── core.py
│   ├── employees.py
│   ├── forms.py
│   ├── import_data.py
│   ├── models.py
│   ├── offices.py
│   └── statement_of_accounts.py
├── static/
│   ├── css/
│   │   ├── data_mapping.css
│   │   ├── declaration_form.css
│   │   ├── form_helpers.css
│   │   ├── form_view.css
│   │   ├── layout.css
│   │   ├── select_software.css
│   │   ├── statement_of_accounts.css
│   │   ├── style.css
│   │   ├── table_view.css
│   │   └── upload_data.css
│   └── js/
│       └── address_autofill.js
├── templates/
│   ├── base.html
│   └── company/
│       ├── _form_helpers.html
│       ├── accounts_receivable_form.html
│       ├── data_mapping.html
│       ├── declaration_form.html
│       ├── deposit_form.html
│       ├── edit_employee.html
│       ├── employee_list.html
│       ├── login.html
│       ├── notes_receivable_form.html
│       ├── office_form.html
│       ├── office_list.html
│       ├── register_employee.html
│       ├── select_software.html
│       ├── statement_of_accounts.html
│       ├── temporary_payment_form.html
│       └── upload_data.html
│   ├── index.html
│   ├── register.html
│   └── result.html
├── instance/
├── migrations/
├── requirements.txt
├── run.py
├── template_beppyo1.pdf
└── Webアプリ開発 引き継ぎ0728

...

【次期タスク提案】

タスク1: 既存主要フォームのUIリファクタリング

タスク2: ユーザー認証機能の実装

【留意事項】
削除機能は現在、ブラウザ標準のconfirm()ダイアログに依存している。UI/UXをさらに向上させる場合、将来的により洗練されたカスタムモーダルへの置換が考えられるが、現時点では指令書原則4に基づき、既存のパターンを変更しないこと。 