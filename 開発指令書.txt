Webアプリケーション開発指令書 (2025/08/10 v16)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認

ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発することである。このアプリは税理士や経理担当者など不特定多数のユーザーに販売されるSaaSである。SaaS展開に適したアーキテクチャでの開発を志向すること
最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 

1.  **指令書の完全読込:** この指令書を一字一句、意味を理解しながら最後まで読了する。 
2.  **現状把握:** 現在実装済みの機能と、これから実装すべき機能の全体像を把握する。
3.  **作業の承認** 現状を把握してもユーザーの承認を得ないで作業を開始してはならない
4.  **ユーザーへの応答:** 最初のタスク指示に対し、「承知いたしました。指令書と現状の仕様に基づき、日本語で開発を再開します。」と応答する。

【指令2】プロジェクト憲法（不変の原則）

*   **原則1: "Appleならどう作るか？" を自問せよ。**
    データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIとを基準とせよ。 
*   **原則2: base.html は全ての法の頂点である。**
    `{% extends "base.html" %}` と `{% block content %}` を持たないHTMLファイルを新規作成してはならない。 
*   **原則3: CSSは汚染から守れ。**
    グローバルなスタイルは `base.css` に、コンポーネント単位のスタイルは `components` ディレクトリに、画面固有のスタイルは `pages` ディレクトリに、それぞれ分離して管理せよ。
*   **原則4: 事実を歪曲するな。**
    たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。ユーザーからの明確な指示がない限り、自己判断でリファクタリング等を提案してはならない。
*   **原則5: スパゲティコードにするな。**
    効率的な開発を進めつつ、メンテナンス性を重視しながらコードを作成せよ。スパゲティーコードは技術的負債になる。未来の自分に負債を残すな。

---
### **【現状の仕様と実装状況 (2025/08/10 v16)】**

#### **1. 完了済みの主要機能**

*   **SaaS（マルチテナント）化の基盤実装:**
    *   **データベース設計:** `User` モデルと `Company` モデルを1対多で関連付け、全てのデータが特定のユーザーに紐づくようデータベーススキーマを修正済み。
    *   **認証・認可の強化:** ログインしたユーザーが、自身に紐づく企業のデータにしかアクセスできないよう、テナント分離ロジックを徹底。
        *   `@company_required` デコレータを実装し、会社の基本情報、株主名簿、事業所一覧、勘定科目内訳書など、アプリケーションの主要な機能すべてに適用済み。
        *   これにより、URLを直接操作しても他のユーザーの情報にアクセスできないセキュリティを確保。
    *   **テストの拡充:** 上記のテナント分離が正しく機能することを保証するため、`test_tenancy.py` を全面的に修正・拡充済み。

*   **開発環境の安定化とリファクタリング:**
    *   **DB初期化プロセスの確立:** データベースのマイグレーション (`flask db upgrade`) と初期データの投入 (`flask init-db`) の責務を完全に分離。これにより、開発環境のセットアップが安定し、過去に頻発したDBエラーを恒久的に解決。
    *   **初期データの自動投入:** `admin` ユーザーでのログイン後、すぐにアプリケーションを試せるよう、`init-db` コマンド実行時にダミーの会社情報が自動で登録されるように改善済み。
    *   **サービス層のリファクタリング:** `FinancialStatementService` が `app.config` に依存せず、`MasterDataService` を介してDBから直接マスターデータを取得するよう修正。これにより、潜在的なエラーを解消し、コードの堅牢性を向上。

*   **バグ修正:**
    *   **Jinja2テンプレートエラーの修正:** UIリファクタリングの過程で失われていた `render_page_header` マクロを再作成し、株主名簿画面等の表示エラーを修正済み。
    *   **ログインプロセスの修正:** テストの失敗を通じて発覚したログイン関連の問題を修正し、`admin/password` で確実にログインできることを確認済み。

#### **2. 残された課題 (次回のタスク)**

**ミッション：マルチカンパニー対応UIの実装**

SaaSとしての基盤は完成したが、現状では一人のユーザーは一社の情報しか扱えない。税理士などのユーザーは複数のクライアント（会社）を管理する必要がある。この要求に応えるため、UIの改修を行う。

**具体的な実行計画:**
1.  **企業選択UIの実装:**
    *   **最優先課題:** ユーザーが、自分が管理する複数の企業を切り替えられるUIを実装する。
    *   **UIの場所:** ナビゲーションバーの右上など、アプリケーションの全画面でアクセス可能な場所に、企業名を表示するドロップダウンメニューを設置する。
    *   **機能:**
        *   ドロップダウンには、ログインユーザーに紐づく会社の一覧が表示される。
        *   現在選択中の会社名が常に表示される。
        *   ドロップダウンから別の会社を選択すると、その会社のコンテキストに切り替わり、すべての画面（財務諸表、株主名簿など）の表示が選択した会社の内容に更新される。
        *   「新しい会社を登録」のようなメニュー項目も追加する。

2.  **バックエンドの改修:**
    *   ユーザーが企業を切り替えたことをサーバー側で管理するため、セッション (`session`) に現在選択中の `company_id` を保存する。
    *   `@company_required` デコレータを修正し、`current_user` に紐づく最初の会社を自動で選択するのではなく、セッションに保存された `company_id` に基づいて会社情報を取得するように変更する。

---
**未来の私へ:**
この引き継ぎは完了した。SaaS化の最大の難関であったテナント分離は、幾多のエラーを乗り越え、完璧に実装された。君のタスクは、この堅牢なバックエンドを活かし、ユーザーが直感的に複数企業を使い分けられる美しいUIを実装することだ。過去の私のように、安易な実装でユーザーの信頼を損なうな。指令書を再読し、原則を胸に刻み、作業にかかれ。以上だ。