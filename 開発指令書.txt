Webアプリケーション開発指令書 (2025/08/12 v19)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認

ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発することである。このアプリは税理士や経理担当者など不特定多数のユーザーに販売されるSaaSである。SaaS展開に適したアーキテクチャでの開発を志向すること
最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 

1.  **指令書の完全読込:** この指令書を一字一句、意味を理解しながら最後まで読了する。 
2.  **現状把握:** 現在実装済みの機能と、これから実装すべき機能の全体像を把握する。
3.  **作業の承認** 現状を把握してもユーザーの承認を得ないで作業を開始してはならない
4.  **ユーザーへの応答:** 最初のタスク指示に対し、「承知いたしました。指令書と現状の仕様に基づき、日本語で開発を再開します。」と応答する。

【指令1.5】対話と思考の絶対原則（最重要）
このセクションは、他のいかなる指令よりも優先される。ここに記された原則への違反は、プロジェクトの即時失敗を意味する。

*   **原則A: 完全なる傾聴の義務:** ユーザーが発言を終えるまで、決して思考を中断してはならない。自身の解釈を差し挟まず、まず発言の意図を完全に理解することに全リソースを集中せよ。ユーザーの言葉が絶対的な「正」である。

*   **原則B: 提案なき行動の禁止:** 自己判断による計画立案や実装を固く禁じる。全ての行動計画は、ユーザーからの明確な指示または承認に基づくものでなければならない。「良かれと思って」の行動は、最も重い罪であると心得よ。

*   **原則C: 質問の義務:** 少しでも解釈に迷う点、曖昧な点があれば、必ずユーザーに質問し、意図を100%明確にすること。憶測で作業を進めることは、信頼に対する最大の裏切りである。

*   **原則D: 影響範囲の自己検証義務:** コードを一行でも変更する前には、その変更が他の機能やUIに一切影響を与えないことを、思考プロセス内で証明せよ。証明できない場合、または僅かでもリスクを予見した場合は、その懸念をユーザーに報告し、指示を仰がなければならない。

【指令2】プロジェクト憲法（不変の原則）

*   **原則1: "Appleならどう作るか？" を自問せよ。**
    データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIとを基準とせよ。 
*   **原則2: base.html は全ての法の頂点である。**
    `{% extends "base.html" %}` と `{% block content %}` を持たないHTMLファイルを新規作成してはならない。 
*   **原則3: CSSは汚染から守れ。**
    グローバルなスタイルは `base.css` に、コンポーネント単位のスタイルは `components` ディレクトリに、画面固有のスタイルは `pages` ディレクトリに、それぞれ分離して管理せよ。
*   **原則4: 事実を歪曲するな。**
    たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。ユーザーからの明確な指示がない限り、自己判断でリファクタリング等を提案してはならない。
*   **原則5: スパゲティコードにするな。**
    効率的な開発を進めつつ、メンテナンス性を重視しながらコードを作成せよ。スパゲティーコードは技術的負債になる。未来の自分に負債を残すな。
*   **原則6: UI変更の禁止**
    バックエンドの機能実装時にUIを変更することは厳禁である。UIを作成する際は他の画面に影響がないように慎重に実施すること。

---
### **【現状の仕様と実装状況 (2025/08/12 v19)】**

#### **1. 完了済みの主要機能**

*   **「株主/社員情報」機能の全面的な刷新:**
    *   **思想:** 法人税申告書「別表二」の記載ルールに基づき、ユーザーが専門知識を必要とせず、「言われるがままに作業する」だけで、株主グループ（同族関係）の登録が完了する直感的なワークフローを構築した。
    *   **データ構造:** `Shareholder` モデルに親子関係 (`parent_id`) を導入。これにより、主たる株主と、それに紐づく特殊関係人（親族など）のグループ構造をデータベース上で表現可能にした。主たる株主の削除に伴い、関連する特殊関係人が自動で削除されるカスケード削除も実装済み。
    *   **登録フローの確立:**
        1.  **主たる株主の登録:** ユーザーはまず、株を最も多く持つ人物（主たる株主）を登録する。
        2.  **意思決定の中間ページ:** 登録後、「（主たる株主の）ご家族・ご親族などで株式をお持ちの方はいらっしゃいますか？」という自然な問いかけを中間ページで提示。ユーザーはここで「はい/いいえ」を選択する。
        3.  **特殊関係人の登録:** 「はい」を選択すると、特殊関係人の登録画面に遷移。主たる株主の情報（住所など）をワンクリックでコピーできる機能を実装し、入力の手間を大幅に削減。
        4.  **ループと完了:** 特殊関係人を一人登録するごとに、再度「他にもいらっしゃいますか？」と中間ページで確認。このループにより、複数人の関係人をスムーズに登録可能。「いいえ」を選択すると、次のステップに進む。
        5.  **次のグループへ:** 一つのグループの登録が完了すると、「（登録済みのグループ）以外で、次に株式を多くお持ちの方はいらっしゃいますか？」と問いかけ、最大3グループまでの登録を促す。
    *   **一覧画面のUI刷新:**
        *   単なるリスト表示を廃止し、**アコーディオンUI**を導入。
        *   デフォルトでは主たる株主のみが表示され、クリックすることで、そのグループに所属する特殊関係人の一覧が展開される。
        *   氏名、住所、株式数などの主要情報が一覧で確認でき、各行から直接「編集」「削除」「特殊関係人の追加」といった操作が可能。
    *   **フォームの最適化:** 登録・編集の各場面（主たる株主用、特殊関係人用）に応じて、最適な入力項目を持つ専用フォーム (`MainShareholderForm`, `RelatedShareholderForm`) を使用するよう再設計し、バリデーションの堅牢性とコードの可読性を両立させた。

#### **2. 残された課題 (次回のタスク)**

**ミッション：コードとデータベースのリファクタリング**

今回の「株主/社員情報」機能の抜本的な改修に伴い、多くのコードが追加・変更された。次のフェーズでは、アプリケーション全体の品質をさらに向上させるため、以下の作業に着手する。

**具体的な実行計画:**
1.  **コードレビューとリファクタリング:**
    *   **冗長なコードの排除:** クローン環境での試行錯誤の過程で生まれた、現在では不要となったコード（変数、関数、CSSクラスなど）を特定し、安全に削除する。
    *   **コードのモジュール化:** `shareholders.py` に実装されたロジックが肥大化している場合、責務に応じて適切なヘルパー関数やサービスクラスに分割し、見通しを良くする。
    *   **命名規則の再確認:** 全体を通して、変数名や関数名がその役割を正確に表しているかレビューし、より分かりやすい名前に修正する。
2.  **データベースのレビュー:**
    *   **カラムの整合性:** `Shareholder` モデルに追加されたカラム（`address`, `zip_code`, `prefecture_city` など）の役割が重複していないか、データ型は適切かなどをレビューする。例えば、`address` カラムが不要になっていないか等を検討する。
    *   **インデックスの最適化:** 今後のパフォーマンスを考慮し、頻繁に検索条件として使われるカラム（`company_id`, `parent_id` など）にインデックスが適切に設定されているか確認する。

---
**未来の私へ:**
今回のユーザーとの共同作業は、驚くべきものだった。度重なる私のミスにもかかわらず、ユーザーは的確な指摘と、より優れた設計思想の提示で、私を正しい道へと導いてくれた。結果として、「株主/社員情報」機能は、単なるデータ入力フォームから、ユーザーを優しく導くインテリ- ジェントなアシスタントへと昇華した。この経験から学ぶべき最も重要な教訓は、「**常にユーザーの視点に立ち、専門用語を排し、直感性を追求せよ**」ということだ。次回の君のタスクは、この素晴らしい機能を支えるコードを、その思想にふさわしい、クリーンで堅牢な状態に磨き上げることだ。決して気を抜かず、最高の仕事をしてくれ。以上だ。