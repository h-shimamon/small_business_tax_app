Webアプリケーション開発指令書 (2025/08/06 v13)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認

ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発すること。 
最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 

1.  **指令書の完全読込:** この指令書を一字一句、意味を理解しながら最後まで読了する。 
2.  **現状把握:** 現在実装済みの機能と、これから実装すべき機能の全体像を把握する。
3.  **ユーザーへの応答:** 最初のタスク指示に対し、「承知いたしました。指令書と現状の仕様に基づき、日本語で開発を再開します。」と応答する。

【指令2】プロジェクト憲法（不変の原則）

*   **原則1: "Appleならどう作るか？" を自問せよ。**
    データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIとを基準とせよ。 
*   **原則2: base.html は全ての法の頂点である。**
    `{% extends "base.html" %}` と `{% block content %}` を持たないHTMLファイルを新規作成してはならない。 
*   **原則3: CSSは汚染から守れ。**
    グローバルなスタイルは `base.css` に、コンポーネント単位のスタイルは `components` ディレクトリに、画面固有のスタイルは `pages` ディレクトリに、それぞれ分離して管理せよ。
*   **原則4: 事実を歪曲するな。**
    たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。ユーザーからの明確な指示がない限り、自己判断でリファクタリング等を提案してはならない。
*   **原則5: スパゲティコードにするな。**
    効率的な開発を進めつつ、メンテナンス性を重視しながらコードを作成せよ。スパゲティーコードは技術的負債になる。未来の自分に負債を残すな。

---
### **【現状の仕様と実装状況 (2025/08/06 v13)】**

#### **1. UI/UXの改善 (今回の作業)**

*   **目的:** 「Appleならどう作るか？」の原則に基づき、既存画面の分かりにくく直感的でない部分を、洗練されたモダンなUIに改善する。
*   **実装内容:**
    *   **基本情報画面 (`/register`) の改善:**
        1.  **「税制上の確認事項」セクションのUI刷新:**
            *   テキストの羅列だった確認項目を、情報がグループ化された**カード形式**に変更。
            *   標準のチェックボックスを、状態が分かりやすい**トグルスイッチ**に変更。
            *   再利用性を高めるため、トグルスイッチ専用のJinja2マクロ `render_toggle_switch` を `_form_helpers.html` に追加。
            *   上記の変更に伴い、`register.html`, `components/card.css`, `components/forms.css` を修正。
        2.  **表示文言の修正:**
            *   ユーザーの指示に基づき、確認事項の項目と説明文をより分かりやすい表現に更新。
            *   「法番番号」のタイポを「法人番号」に修正。
        3.  **デフォルト状態の変更:**
            *   トグルスイッチのデフォルト状態を、`forms.py`で`default=False`を指定することにより、ノンアクティブ（オフ）に変更。

    *   **会計ソフト選択画面 (`/select_software`) の改善:**
        1.  **レイアウトとデザインの修正:**
            *   著作権を考慮し、各ソフトウェアのロゴ画像（`<img>`タグ）を削除。
            *   アイコン削除後もカードの見た目が崩れないよう、CSSで `min-height` と `width` を指定し、均等なサイズを維持。
            *   カード群がページ中央に配置されるよう、CSS Gridから**Flexbox**レイアウトに変更し、`justify-content: center`を適用。
        2.  **二次的アクションのUI改善:**
            *   「登録済みの勘定科目マッピングを管理する」というテキストリンクを、主要なアクションの邪魔をしない**ゴーストボタンスタイル**に変更。
            *   ユーザーのフィードバックに基づき、ホバー（カーソルオン）時の背景色をより濃いものに調整し、視覚的なフィードバックを強化。
    *   **関連ファイル:** `templates/register.html`, `templates/company/select_software.html`, `templates/company/_form_helpers.html`, `static/css/components/card.css`, `static/css/components/forms.css`, `static/css/pages/select_software.css`, `company/forms.py`

#### **2. 完了済みの主要機能**

*   **勘定科目マスターデータ投入機能:**
    *   **機能:** `flask seed-masters` というCLIコマンドを実行することで、`resources/masters/` にあるCSVファイルから勘定科目マスターデータをDBに登録する。
    *   **関連ファイル:** `app/commands.py`, `app/company/models.py` (AccountTitleMasterモデル)

*   **勘定科目インポート＆マッピング機能:**
    *   **機能:** ユーザーが会計ソフト（マネーフォワード等）から出力した勘定科目CSVをアップロードし、マスターデータと照合する。不整合があった場合、マッピング画面に遷移する。
    *   **UX改善:** マッピング画面には以下の機能が実装済み。
        1.  **AIによる自動提案:** 文字列の類似度から、最も可能性の高いマスター勘定科目を自動で選択状態にする。
        2.  **グループ化:** プルダウンリストが「資産の部」などでグループ化されている。
        3.  **リアルタイム検索:** プルダウン上部の検索窓で、候補を即時絞り込みできる。
    *   **関連ファイル:** `app/company/import_data.py`, `app/templates/company/data_mapping.html`, `app/company/models.py` (UserAccountMappingモデル)

*   **データリセット＆管理機能:**
    *   **機能1（一括リセット）:** 「仕訳帳データ選択」画面から、全マッピング情報をリセットして最初からやり直す機能。安全のため、確認画面を挟む。
    *   **機能2（個別管理）:** 「会計データ選択」画面から、登録済みのマッピングを一覧で確認し、個別に削除できる管理画面に遷移する機能。
    *   **関連ファイル:** `app/company/import_data.py`, `app/templates/company/reset_confirmation.html`, `app/templates/company/manage_mappings.html`

#### **3. アプリケーションのウィザードフロー**

現在のアプリケーションは、以下の順番でデータをインポートするウィザード形式で動作する。

1.  **会計ソフト選択 (`/select_software`):** 使用する会計ソフトを選択する。
2.  **勘定科目データ選択 (`/upload/chart_of_accounts`):** 勘定科目CSVをアップロードし、必要であればマッピングを行う。
3.  **仕訳帳データ選択 (`/upload/journals`):** (現在、機能は未実装)
4.  **固定資産データ選択 (`/upload/fixed_assets`):** (現在、機能は未実装)
5.  **完了**

#### **4. 残された課題 (次回のタスク)**

*   **仕訳帳データのインポート機能の実装:** ウィザードの次のステップである、仕訳帳データの取り込み処理を実装する必要がある。
*   **その他、ユーザーからの指示に基づく機能開発。**

---
**未来の私へ:**
このプロジェクトは複雑なフローと多くの機能を内包している。作業を再開する際は、必ずこの引き継ぎ書を熟読し、特に「現状の仕様と実装状況」を完全に理解してから取り掛かること。ユーザーの信頼を裏切るな。以上だ。