Webアプリケーション開発指令書 (2025/08/10 v15)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認

ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発することである。このアプリは税理士や経理担当者など不特定多数のユーザーに販売されるSaaSである。SaaS展開に適したアーキテクチャでの開発を志向すること
最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 

1.  **指令書の完全読込:** この指令書を一字一句、意味を理解しながら最後まで読了する。 
2.  **現状把握:** 現在実装済みの機能と、これから実装すべき機能の全体像を把握する。
3.  **作業の承認** 現状を把握してもユーザーの承認を得ないで作業を開始してはならない
4.  **ユーザーへの応答:** 最初のタスク指示に対し、「承知いたしました。指令書と現状の仕様に基づき、日本語で開発を再開します。」と応答する。

【指令2】プロジェクト憲法（不変の原則）

*   **原則1: "Appleならどう作るか？" を自問せよ。**
    データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIとを基準とせよ。 
*   **原則2: base.html は全ての法の頂点である。**
    `{% extends "base.html" %}` と `{% block content %}` を持たないHTMLファイルを新規作成してはならない。 
*   **原則3: CSSは汚染から守れ。**
    グローバルなスタイルは `base.css` に、コンポーネント単位のスタイルは `components` ディレクトリに、画面固有のスタイルは `pages` ディレクトリに、それぞれ分離して管理せよ。
*   **原則4: 事実を歪曲するな。**
    たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。ユーザーからの明確な指示がない限り、自己判断でリファクタリング等を提案してはならない。
*   **原則5: スパゲティコードにするな。**
    効率的な開発を進めつつ、メンテナンス性を重視しながらコードを作成せよ。スパゲティーコードは技術的負債になる。未来の自分に負債を残すな。

---
### **【現状の仕様と実装状況 (2025/08/10 v15)】**

#### **1. 完了済みの主要機能**
*   **UI/UXの改善:**
    *   「会計ソフト選択」「データアップロード」画面のUIを、より直感的で美しいデザインに刷新済み。
    *   「社員名簿」「事業所一覧」など、主要な一覧画面のレイアウト（ページヘッダー、Empty State表示）を共通化し、アプリケーション全体の一貫性を確保済み。
*   **財務諸表のタブUI化とソート:**
    *   「財務諸表」画面において、損益計算書と貸借対照表をタブで明確に分離。
    *   貸借対照表の表示順を、マスターデータ（`balance_sheet.csv`）の`No.`列に基づく正しい順序に修正済み。
*   **マスターデータの自動同期機能:**
    *   アプリケーション起動時に、マスターCSVファイルとデータベースの同期状態を自動でチェックし、差異があれば更新する仕組みを導入済み。これにより、手動での同期漏れによる不具合を恒久的に防止。

#### **2. 残された課題 (次回のタスク)**

**ミッション：このアプリケーションを、SaaS（マルチテナント）化せよ。**

**具体的な実行計画:**
1.  **データベース設計の導入:**
    *   **最優先課題:** 現在のファイルベースの一時的な処理を、永続的なデータベースストレージに置き換える。
    *   **テーブル構成:** 以前の対話で合意した、以下のテーブル構成を基本とする。全てのデータが特定の企業に紐づくよう、`company_id` を適切に配置することが、このフェーズの成功の鍵である。
        *   `users`, `companies`, `financial_periods`, `accounts`, `journals` ...
2.  **認証・認可の強化:**
    *   ログインしたユーザーが、自身に紐づく企業のデータにしかアクセスできないよう、全てのデータアクセス処理に、**テナント分離のロジックを徹底的に組み込む。** これは、SaaSとして最も重要なセキュリティ要件である。
3.  **UIの改修:**
    *   ユーザーが、自分が管理する複数の企業を切り替えられるUI（ナビゲーションバーのドロップダウンなど）を実装する。

---
**未来の私へ:**
この引き継ぎは完了した。ユーザーはこれらのリファクタリングを承認済みだが、それはあくまで計画に対してだ。君のタスクは、この計画を**完璧に実行**することにある。過去の私のように、安易な実装でユーザーの信頼を損なうな。指令書を再読し、原則を胸に刻み、作業にかかれ。以上だ。