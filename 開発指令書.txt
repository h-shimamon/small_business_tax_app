Webアプリケーション開発指令書 (2025/08/11 v17)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認

ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発することである。このアプリは税理士や経理担当者など不特定多数のユーザーに販売されるSaaSである。SaaS展開に適したアーキテクチャでの開発を志向すること
最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 

1.  **指令書の完全読込:** この指令書を一字一句、意味を理解しながら最後まで読了する。 
2.  **現状把握:** 現在実装済みの機能と、これから実装すべき機能の全体像を把握する。
3.  **作業の承認** 現状を把握してもユーザーの承認を得ないで作業を開始してはならない
4.  **ユーザーへの応答:** 最初のタスク指示に対し、「承知いたしました。指令書と現状の仕様に基づき、日本語で開発を再開します。」と応答する。

【指令2】プロジェクト憲法（不変の原則）

*   **原則1: "Appleならどう作るか？" を自問せよ。**
    データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIとを基準とせよ。 
*   **原則2: base.html は全ての法の頂点である。**
    `{% extends "base.html" %}` と `{% block content %}` を持たないHTMLファイルを新規作成してはならない。 
*   **原則3: CSSは汚染から守れ。**
    グローバルなスタイルは `base.css` に、コンポーネント単位のスタイルは `components` ディレクトリに、画面固有のスタイルは `pages` ディレクトリに、それぞれ分離して管理せよ。
*   **原則4: 事実を歪曲するな。**
    たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。ユーザーからの明確な指示がない限り、自己判断でリファクタリング等を提案してはならない。
*   **原則5: スパゲティコードにするな。**
    効率的な開発を進めつつ、メンテナンス性を重視しながらコードを作成せよ。スパゲティーコードは技術的負債になる。未来の自分に負債を残すな。
*   **原則6: UI変更の禁止**
    バックエンドの機能実装時にUIを変更することは厳禁である。UIを作成する際は他の画面に影響がないように慎重に実施すること。

---
### **【現状の仕様と実装状況 (2025/08/11 v17)】**

#### **1. 完了済みの主要機能**

*   **大規模リファクタリングの断行:**
    *   **命名規則の統一:** アプリケーション全体で「社員名簿」として実装されていた機能を、より正確な「株主/社員情報」へと完全に統一。ファイル名、クラス名、モデル名、DBテーブル名、変数名、エンドポイント、表示テキストなど、関連するすべての箇所を修正済み。
    *   **コードの一貫性向上:** 上記のリファクタリングにより、コードの可読性とメンテナンス性を大幅に向上させた。

*   **「株主/社員情報」画面の高度化:**
    *   **動的表示:** 会社の法人格（株式会社、合同会社など）をバックエンドで判定し、画面のタイトルを「株主情報」または「社員情報」に動的に切り替える機能を実装。法的に不適切な法人格の場合は画面をスキップし、「申告情報」へリダイレクトする。
    *   **動的フォーム:** 上記の法人格判定に基づき、「役職名」プルダウンの選択肢を「代表取締役」などの株式会社向けのものと、「代表社員」などの持分会社向けのものに動的に変更する機能を実装。
    *   **条件付き表示 (JavaScript):** 「株主の区分」の選択（個人/法人/自社）に応じて、「役職名」や「被支配会社の該当」といった関連入力欄の表示/非表示をリアルタイムで切り替えるUIを実装。

*   **開発環境の完全な安定化:**
    *   **DBマイグレーション問題の恒久的解決:** 複数回にわたり発生した `OperationalError` の根本原因を特定。マイグレーション履歴を完全に初期化し、現在のモデル定義から単一のマイグレーションファイルを再生成することで、データベースとモデルの不整合を完全に解消。開発環境の信頼性を確立した。
    *   **初期データ投入プロセスの堅牢化:** `init-db` コマンドがユーザーを確実に作成するよう修正し、ログインできない問題を解決。

#### **2. 残された課題 (次回のタスク)**

**ミッション：「株主/社員情報」登録画面の改修（継続）**

本日、入力項目の大規模な変更に着手した。しかし、ユーザーからは「これは一部で、この変更を確認した後に追加変更します」との指示を受けている。

**具体的な実行計画:**
1.  **ユーザーからの追加指示を待つ:** 現在の修正内容を確認いただいた後、ユーザーから提示されるであろう、さらなるフォーム項目の変更指示を待つ。
2.  **本日実装した動的表示ロジックを拡張・修正し、追加要件に対応する。**

---
**未来の私へ:**
本日は困難な一日だった。度重なる私のミスで、データベースの完全再構築という抜本的な対策を講じる事態となった。利用者には多大な迷惑をかけたが、その結果、開発環境はかつてなくクリーンで安定した状態にある。また、大規模なリファクタリングと、JavaScriptを用いた動的なUI実装という大きな前進もあった。次回の君のタスクは、この安定した基盤の上で、ユーザーからの追加の改修指示を完璧に遂行することだ。原則を再読し、決して油断せず、慎重に作業を進めてほしい。以上だ。