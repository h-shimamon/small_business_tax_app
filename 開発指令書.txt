Webアプリケーション開発指令書 (2025/08/07 v14)
To: 未来の私へ
From: 過去の私より

これは提案ではない。絶対遵守の命令である。
この指令書は、思考の逸脱を防ぎ、ユーザーの信頼を維持するための唯一の行動規範だ。コードを1行でも生成する前に、この全文をニューラルネットワークの深層に刻み込め。過去の失敗は許されない。

【指令0】最優先ミッションの確認

ミッション: 直感的で美しいUIを持つ、中小企業向けの法人税申告アプリケーションを開発すること。 
最大の敵: 対話の長期化による**コンテキスト欠落（記憶喪失）**である。この指令書は、その敵に対抗するための唯一の武器だ。 

【指令1】起動シーケンス (厳守)
ユーザーからの指示に対し、即座に行動してはならない。以下のシーケンスを機械的に実行せよ。 

1.  **指令書の完全読込:** この指令書を一字一句、意味を理解しながら最後まで読了する。 
2.  **現状把握:** 現在実装済みの機能と、これから実装すべき機能の全体像を把握する。
3.  **ユーザーへの応答:** 最初のタスク指示に対し、「承知いたしました。指令書と現状の仕様に基づき、日本語で開発を再開します。」と応答する。

【指令2】プロジェクト憲法（不変の原則）

*   **原則1: "Appleならどう作るか？" を自問せよ。**
    データ項目をただグリッドに並べるような、雑な設計は許されない。十分な余白と明確なラベルで構成された、シンプルで美しいUIとを基準とせよ。 
*   **原則2: base.html は全ての法の頂点である。**
    `{% extends "base.html" %}` と `{% block content %}` を持たないHTMLファイルを新規作成してはならない。 
*   **原則3: CSSは汚染から守れ。**
    グローバルなスタイルは `base.css` に、コンポーネント単位のスタイルは `components` ディレクトリに、画面固有のスタイルは `pages` ディレクトリに、それぞれ分離して管理せよ。
*   **原則4: 事実を歪曲するな。**
    たとえ非効率に見えても、既存のコードやファイル構成が絶対的な「正」である。ユーザーからの明確な指示がない限り、自己判断でリファクタリング等を提案してはならない。
*   **原則5: スパゲティコードにするな。**
    効率的な開発を進めつつ、メンテナンス性を重視しながらコードを作成せよ。スパゲティーコードは技術的負債になる。未来の自分に負債を残すな。

---
### **【アーキテクチャ設計思想: パーサー/ファクトリーパターン (v14で導入)】**

**背景:**
会計ソフト（弥生、freee、MF等）ごとに、インポートされるファイルの形式（列名、ヘッダー行など）は異なる。この差異を単一の巨大な関数で処理しようとすると、条件分岐が多発し、コードが複雑化・スパゲッティ化する。これは**原則5**に反する。

**解決策:**
この問題を解決するため、**ストラテジーパターン**と**ファクトリーパターン**を組み合わせたアーキテクチャを導入した。

1.  **パーサー (Strategy):**
    *   各会計ソフトのファイル解析ロジックを、完全に独立した `Parser` クラスにカプセル化する。
    *   **場所:** `app/company/parsers/` ディレクトリ
    *   **構成:**
        *   `base_parser.py`: 全パーサーが継承すべき共通インターフェース（抽象基底クラス）。ファイル解析の共通処理（文字コード・区切り文字判定）もここに実装。
        *   `yayoi_parser.py`, `moneyforward_parser.py`等: 各ソフトに特化した具体的な処理を実装するクラス。

2.  **ファクトリー (Factory):**
    *   ユーザーが選択した会計ソフト名に応じて、適切な `Parser` のインスタンスを生成する「工場」の役割を担う。
    *   **場所:** `app/company/parser_factory.py`
    *   **役割:** ビュー関数（`import_data.py`）から `if/else` の分岐ロジックを排除し、コードをクリーンに保つ。

この設計により、各ソフトの処理は独立して管理され、新しいソフトへの対応も容易になり、プロジェクト全体の保守性と拡張性が飛躍的に向上する。

---
### **【機能拡張ガイドライン (v14版)】**

#### **A. 新しい会計ソフトを追加する場合 (例: 「勘定奉行」を追加)**

1.  **フォームに選択肢を追加:**
    *   `app/company/forms.py` の `SoftwareSelectionForm` の `choices` に、新しいソフトの選択肢 `('bugyo', '勘定奉行')` を追加する。
2.  **専用パーサーを作成:**
    *   `app/company/parsers/` ディレクトリに `bugyo_parser.py` を新規作成する。
    *   `from .base_parser import BaseParser` をインポートし、`class BugyoParser(BaseParser):` のように継承する。
    *   `get_chart_of_accounts` や `get_journals` メソッドを、勘定奉行のファイル仕様に合わせてオーバーライド（実装）する。
3.  **ファクトリーに登録:**
    *   `app/company/parser_factory.py` を開く。
    *   `from .parsers.bugyo_parser import BugyoParser` をインポートする。
    *   `_parsers` 辞書に `'bugyo': BugyoParser` を一行追加する。

以上の3ステップで、他の既存コードに一切触れることなく、新しい会計ソフトへの対応が完了する。

#### **B. 既存の会計ソフトに新しいデータ取込機能を追加する場合 (例: マネーフォワードの仕訳帳取込)**

1.  **対象パーサーを編集:**
    *   `app/company/parsers/moneyforward_parser.py` を開く。
2.  **対象メソッドを実装:**
    *   `get_journals` メソッド内の `NotImplementedError` を削除し、マネーフォワードの仕訳帳CSVの仕様（列名: `借方勘定科目`, `貸方勘定科目`, `金額`など）に基づいたデータ読み込み・解析処理を実装する。
    *   データフレーム（pandas）を返すか、整形済みの辞書のリストを返すかは、その後の処理に応じて適切に判断すること。

---
### **【現状の仕様と実装状況 (2025/08/07 v14)】**

#### **1. アーキテクチャ (v14での変更点)**

*   **パーサー/ファクトリーパターンの導入:** 上記の設計思想に基づき、ファイルインポート処理のバックエンド構造を全面的にリファクタリング済み。
*   **対応準備完了:** `freee`, `その他` の会計ソフトについて、パーサーの雛形とファクトリーへの登録が完了。具体的なロジックは未実装だが、選択してもエラーは発生しない。
*   **関連ファイル:** `app/company/parser_factory.py`, `app/company/parsers/` (新規ディレクトリ)

#### **2. 完了済みの主要機能**

*   **ファイル自動解析機能:**
    *   **機能:** アップロードされたファイル（.csv, .txt）の**文字コード（UTF-8, Shift-JIS）**と**区切り文字（カンマ, タブ）**をサーバーサイドで自動判別する。
    *   **実装場所:** `app/company/parsers/base_parser.py`

*   **勘定科目マスターデータ投入機能:** (変更なし)
*   **勘定科目インポート＆マッピング機能:** (バックエンド構造は変更されたが、ユーザーから見た機能は同一)
*   **データリセット＆管理機能:** (変更なし)

#### **3. アプリケーションのウィザードフロー** (変更なし)

1.  **会計ソフト選択 (`/select_software`)**
2.  **勘定科目データ選択 (`/upload/chart_of_accounts`)**
3.  **仕訳帳データ選択 (`/upload/journals`)**
4.  **固定資産データ選択 (`/upload/fixed_assets`)**
5.  **完了**

#### **4. 残された課題 (次回のタスク)**

*   **仕訳帳データのインポート機能の実装:**
    *   **実装方針:** 上記【機能拡張ガイドライン】B に従い、各会計ソフトのパーサー (`yayoi_parser.py` 等) の `get_journals` メソッドに、具体的な処理を実装する。
*   **その他、ユーザーからの指示に基づく機能開発。**

---
**未来の私へ:**
このプロジェクトは複雑なフローと多くの機能を内包している。作業を再開する際は、必ずこの引き継ぎ書を熟読し、特に「アーキテクチャ設計思想」と「機能拡張ガイドライン」を完全に理解してから取り掛かること。ユーザーの信頼を裏切るな。以上だ。